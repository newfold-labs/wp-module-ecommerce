name: Tests
on:
  push:
    branches:
      - trunk
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - '**.md'
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup workflow context
        id: workflow
        working-directory: ${{ runner.temp }}
        env:
          REPO: ${{ github.repository }}
        run: |
          mkdir dist
          echo ::set-output name=DIST::${PWD}/dist
          echo ::set-output name=PACKAGE::${REPO##*/}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer vendor directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Log debug information
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: Validate composer.json and composer.lock files
        run: composer validate

      - name: Install PHP Dependencies
        run: composer install --no-progress --no-dev --optimize-autoloader

      - name: Run NPM Install
        run: npm install --legacy-peer-deps

      - name: Build JavaScript
        run: npm run build

      - name: Create Distribution Copy
        run: rsync -r --exclude-from=.distignore --include-from=.distinclude . ${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}

      - name: List Distribution Files
        working-directory: ${{ steps.workflow.outputs.DIST }}
        run: find .

      - name: Configure WordPress
        run: echo '{"config":{"WP_DEBUG_DISPLAY":false},"plugins":["${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}"]}' > .wp-env.override.json

      - name: clone wordpress-bluehost-plugin as submodule
        run: |
          git submodule add -b 'master' https://github.com/bluehost/bluehost-wordpress-plugin.git bluehost-wordpress-plugin
          cd "$(pwd)"/bluehost-wordpress-plugin
          npm i --legacy-peer-deps && npm run php-deps && npm run build && npm run create:dist

      - name: Install WordPress
        run: npx wp-env start --debug

      - name: Install Yith PayPal, Shippo and 'Customize MyAccount' Plugins
        run: |
          cd ~/wp-env/"$(ls ~/wp-env/)"
          docker-compose run --rm -u $(id -u) -e HOME=/tmp cli plugin install woocommerce
          docker-compose run --rm -u $(id -u) -e HOME=/tmp cli plugin install https://hiive.cloud/workers/plugin-downloads/yith-paypal-payments-for-woocommerce
          docker-compose run --rm -u $(id -u) -e HOME=/tmp cli plugin install https://hiive.cloud/workers/plugin-downloads/yith-shippo-shippings-for-woocommerce
          docker-compose run --rm -u $(id -u) -e HOME=/tmp cli plugin install https://hiive.cloud/workers/plugin-downloads/yith-woocommerce-customize-myaccount-page

      - name: Installed Plugin List
        run: npx wp-env run cli wp plugin list

      - name: Installed Theme List
        run: |
          npx wp-env run cli wp theme activate yith-wonder
          npx wp-env run cli wp theme list

      - name: Run PHPUnit Tests
        id: phpTest
        run: npm run test:unit

      - name: Run Cypress Tests
        run: npx cypress run

      - name: Store screenshots of test failures
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: ./tests/cypress/screenshots

      - name: Store screenshots of test failures
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: video
          path: ./tests/cypress/videos

      - name: Check if a debug.log file exists
        id: hasErrors
        run: npx wp-env run wordpress test ! -f /var/www/html/wp-content/debug.log

      - name: Copy debug.log file
        if: ${{ steps.hasErrors.outputs.failure }}
        run: cat /var/www/html/wp-content/debug.log 1>./debug.log 2>/dev/null

      - name: Store debug.log file
        if: ${{ steps.hasErrors.outputs.failure }}
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ./debug.log

      - name: Store a copy of the plugin on success
        if: ${{ success() }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.workflow.outputs.PACKAGE }}
          path: ${{ steps.workflow.outputs.DIST }}
